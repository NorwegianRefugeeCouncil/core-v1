// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nrc-no/notcore/internal/auth (interfaces: Interface)

// Package auth is a generated GoMock package.
package auth

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	containers "github.com/nrc-no/notcore/internal/containers"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetCountryIDsWithReadWritePermissions mocks base method.
func (m *MockInterface) GetCountryIDsWithReadWritePermissions() containers.Set[string] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryIDsWithReadWritePermissions")
	ret0, _ := ret[0].(containers.Set[string])
	return ret0
}

// GetCountryIDsWithReadWritePermissions indicates an expected call of GetCountryIDsWithReadWritePermissions.
func (mr *MockInterfaceMockRecorder) GetCountryIDsWithReadWritePermissions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryIDsWithReadWritePermissions", reflect.TypeOf((*MockInterface)(nil).GetCountryIDsWithReadWritePermissions))
}

// HasCountryLevelPermission mocks base method.
func (m *MockInterface) HasCountryLevelPermission(arg0 string, arg1 Permission) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCountryLevelPermission", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasCountryLevelPermission indicates an expected call of HasCountryLevelPermission.
func (mr *MockInterfaceMockRecorder) HasCountryLevelPermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCountryLevelPermission", reflect.TypeOf((*MockInterface)(nil).HasCountryLevelPermission), arg0, arg1)
}

// IsGlobalAdmin mocks base method.
func (m *MockInterface) IsGlobalAdmin() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsGlobalAdmin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsGlobalAdmin indicates an expected call of IsGlobalAdmin.
func (mr *MockInterfaceMockRecorder) IsGlobalAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsGlobalAdmin", reflect.TypeOf((*MockInterface)(nil).IsGlobalAdmin))
}
