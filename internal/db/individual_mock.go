// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nrc-no/notcore/internal/db (interfaces: IndividualRepo)

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/nrc-no/notcore/internal/api"
)

// MockIndividualRepo is a mock of IndividualRepo interface.
type MockIndividualRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIndividualRepoMockRecorder
}

// MockIndividualRepoMockRecorder is the mock recorder for MockIndividualRepo.
type MockIndividualRepoMockRecorder struct {
	mock *MockIndividualRepo
}

// NewMockIndividualRepo creates a new mock instance.
func NewMockIndividualRepo(ctrl *gomock.Controller) *MockIndividualRepo {
	mock := &MockIndividualRepo{ctrl: ctrl}
	mock.recorder = &MockIndividualRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndividualRepo) EXPECT() *MockIndividualRepoMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockIndividualRepo) GetAll(arg0 context.Context, arg1 api.GetAllOptions) ([]*api.Individual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].([]*api.Individual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIndividualRepoMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIndividualRepo)(nil).GetAll), arg0, arg1)
}

// GetByID mocks base method.
func (m *MockIndividualRepo) GetByID(arg0 context.Context, arg1 string) (*api.Individual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*api.Individual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIndividualRepoMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIndividualRepo)(nil).GetByID), arg0, arg1)
}

// Put mocks base method.
func (m *MockIndividualRepo) Put(arg0 context.Context, arg1 *api.Individual, arg2 []string) (*api.Individual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1, arg2)
	ret0, _ := ret[0].(*api.Individual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockIndividualRepoMockRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockIndividualRepo)(nil).Put), arg0, arg1, arg2)
}

// PutMany mocks base method.
func (m *MockIndividualRepo) PutMany(arg0 context.Context, arg1 []*api.Individual, arg2 []string) ([]*api.Individual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMany", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*api.Individual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutMany indicates an expected call of PutMany.
func (mr *MockIndividualRepoMockRecorder) PutMany(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMany", reflect.TypeOf((*MockIndividualRepo)(nil).PutMany), arg0, arg1, arg2)
}

// SoftDelete mocks base method.
func (m *MockIndividualRepo) SoftDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SoftDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SoftDelete indicates an expected call of SoftDelete.
func (mr *MockIndividualRepoMockRecorder) SoftDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SoftDelete", reflect.TypeOf((*MockIndividualRepo)(nil).SoftDelete), arg0, arg1)
}
