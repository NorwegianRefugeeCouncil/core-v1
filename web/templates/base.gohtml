{{define "base"}}
<!DOCTYPE html>
<html lang="en">
<head>
    <title>Core</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/favicon.ico">
    <link rel="manifest" href="/static/site.webmanifest">
    <link rel="stylesheet" href="/static/bootstrap-icons.css">
    <link rel="stylesheet" href="/static/theme.min.css">
    <script src="/static/bootstrap.bundle.min.js"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
    {{template "head" .}}
</head>
<body>
{{template "body" .}}

{{if .ErrorKey}}
    <!-- BEGIN ERROR MODAL -->
    <div class="modal modal-lg d-inline" tabindex="-1" id="action-confirm-modal-0">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-circle me-2 text-danger"></i>
                        An error occured
                    </h5>
                    <a class="btn-close"
                       href="/countries/{{.RequestContext.SelectedCountryID}}/individuals"
                    >
                    </a>
                </div>

                <div class="modal-body">
                    <p>
                        {{.ErrorKey}}
                    </p>
                </div>
                <div class="modal-footer">
                    <form class="w-100"
                          id="delete-individual-form"
                          action="/countries/{{.Individual.CountryID}}/individuals/{{.Individual.ID}}/delete"
                          method="post">
                        <div class="d-flex flex-row justify-content-end">
                            <a class="btn btn-secondary"
                               href="/countries/{{.RequestContext.SelectedCountryID}}/individuals"
                            >
                                <i class="bi bi-house me-2"></i>
                                Go back to Individuals List
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <!-- END ERROR MODAL -->
{{end}}
</body>



<script type="application/javascript">

    function delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function retryPromise(fn, maxErrorCount, delayMs) {
        const errors = [];
        while (errors.length < maxErrorCount) {
            try {
                return fn();
            } catch (e) {
                console.log("Promise failed " + errors.length + " times. Retrying in " + delayMs + "ms", e);
                errors.push(e);
                await delay(delayMs);
            }
        }
        throw new Error("Max tentatives reached");
    }

    async function pollRefreshToken() {
        while (true) {
            try {
                await retryPromise(async () => {
                    console.log("Refreshing token");
                    const resp = await fetch("{{tokenRefreshURL}}")
                    if (resp.status >= 400) {
                        console.log("Error refreshing token", resp);
                        throw new Error("Failed to refresh session");
                    }
                }, 3, 500)
                await delay({{tokenRefreshInterval.Milliseconds}})
            } catch (e) {
                console.error(e);
                window.location.href = "{{loginURL}}";
            }
        }
    }

    // TODO: Wait for Okta Ticket to be resolved.
    // Disabling this for now, as Okta is not returning the groups
    // as part of the refresh token response. This means that the
    // user will have to login after 5 seconds. This is not ideal.
    // (async () => {
    //     await delay(5000);
    //     await pollRefreshToken();
    // })();

    const searchFormId = "searchForm"

    document.addEventListener("DOMContentLoaded", function () {

        const searchForm = document.getElementById(searchFormId)
        // Disable sending empty parameters to the search endpoint.
        // Otherwise, the URL would be huge with all the default query
        // parameters included.
        searchForm.onsubmit = function () {
            let inputs, index;
            inputs = [
                ...document.getElementsByTagName('input'),
                ...document.getElementsByTagName('select'),
            ];
            for (index = 0; index < inputs.length; ++index) {
                if (!searchForm.contains(inputs[index])) {
                    continue
                }
                if (inputs[index].value === "") {
                    inputs[index].disabled = true;
                }
            }
        }
    })

</script>


{{end}}
