{{define "head"}}
    <script type="application/javascript" src="/static/autocomplete.js"></script>
    <script type="application/javascript" src="/static/rxjs.js"></script>
    <script type="application/javascript" src="/static/country_selector.js"></script>
    <script type="application/javascript">

        const uploadIndividualFileInputId = "individual-upload--file"
        const uploadIndividualFileButtonId = "individual-upload--button"
        const uploadIndividualFileFormId = "individual-upload--form"
        const individualActionFormId = "individuals-action-form"
        const deleteIndividualsButtonId = "deleteIndividualsButton"
        const downloadIndividualsButtonId = "downloadIndividualsButton"
        const deleteIndividualsButtonContentId = "deleteIndividualsButtonContent"
        const downloadIndividualsButtonContentId = "downloadIndividualsButtonContent"
        const selectIndividualCheckboxClass = "select-row-checkbox"
        const selectAllIndividualsCheckboxId = "selectAllCheckbox"
        const selectedRowAttributes = {"aria-selected": "true"}
        const selectedRowClasses = ["table-active"]
        const dataIndividualIdAttribute = "data-individual-id"
        const activeDeleteButtonClasses = ["btn-danger"]
        const inactiveDeleteButtonClasses = ["btn-outline-secondary", "disabled"]
        const inactiveDeleteButtonText = "Delete individuals"
        const inactiveDownloadButtonText = "Download individuals"
        const deleteIndividualsConfirmationModalId = "deleteIndividualsConfirmationModal"
        const deleteIndividualsConfirmationModalContentId = "deleteIndividualsConfirmationModalContent"
        const deleteIndividualsConfirmationModalConfirmButtonId = "deleteIndividualsConfirmationModalConfirmButton"
        const deleteIndividualsConfirmationModalConfirmButtonContentId = "deleteIndividualsConfirmationModalConfirmButtonContent"
        const individualTableContainerId = individualActionFormId
        const individualTableHorizontalScrollKey = "individualsTableHorizontalScroll"

        /**
         * Changes the URL
         * @param url
         */
        function goToURL(url) {
            window.location.href = url
        }

        /**
         * Gets the number of selected individuals.
         * @returns {number}
         */
        function getSelectedIndividualCount() {
            return Array.from(document.getElementsByClassName(selectIndividualCheckboxClass))
                .filter(checkbox => checkbox.checked)
                .length
        }

        /**
         * Gets the text for the delete button based on the number of selected individuals.
         * @param count The number of selected individuals.
         * @returns {string} The text for the delete button.
         */
        function getDeleteButtonText(count) {
            if (count === 0) {
                return inactiveDeleteButtonText
            } else {
                return "Delete " + count + " individual" + (count > 1 ? "s" : "")
            }
        }

        /**
         * Gets the text for the download button based on the number of selected individuals.
         * @param count The number of selected individuals.
         * @returns {string} The text for the download button.
         */
        function getDownloadButtonText(count) {
            if (count === 0) {
                return inactiveDownloadButtonText
            } else {
                return "Download selected individuals"
            }
        }

        /**
         * Gets the row id for the given individual id.
         * @param individualId The individual id.
         * @returns {string} The row id.
         */
        function getRowIdForIndividualId(individualId) {
            return "individual-row-" + individualId;
        }

        /**
         * Gets the checkbox id for the given individual id.
         * @param individualId The individual id.
         * @returns {string} The checkbox id.
         */
        function getSelectCheckboxIdForIndividualId(individualId) {
            return "individual-checkbox-" + individualId;
        }

        /**
         * opens the upload modal
         */
        function openUploadDialog() {
            document.getElementById(uploadIndividualFileInputId).click();
        }

        /**
         * Opens the individual deletion confirmation modal
         */
        function refreshDeleteConfirmationModal() {
            const count = getSelectedIndividualCount()
            const modalContent = document.getElementById(deleteIndividualsConfirmationModalContentId)
            const confirmButtonContent = document.getElementById(deleteIndividualsConfirmationModalConfirmButtonContentId)
            modalContent.innerHTML = "Are you sure you want to delete " + count + " individual" + (count > 1 ? "s" : "") + "?"
            confirmButtonContent.innerText = "Delete " + count + " individual" + (count > 1 ? "s" : "")
        }

        /**
         * submits the upload form
         */
        function submitUploadForm() {
            document.getElementById(uploadIndividualFileButtonId).disabled = true;
            document.getElementById(uploadIndividualFileFormId).submit();
        }

        /**
         * submits the action for the selected individuals
         * @param {string} action
         */
        function submitActionForm(action) {
            const form = document.getElementById(individualActionFormId);
            form.action = "/countries/{{.Options.CountryID}}/individuals/" + action;
            form.submit();
        }

        /**
         * returns the id of the individual associated with the given checkbox
         * @param checkbox
         * @returns string
         */
        function getIndividualIdFromSelectCheckbox(checkbox) {
            const row = checkbox.closest('tr');
            return row.getAttribute(dataIndividualIdAttribute)
        }

        function downloadFunc() {
            const selectedIds = Array.from(document.getElementsByClassName(selectIndividualCheckboxClass))
                .filter(checkbox => checkbox.checked)
                    .map(function (item) {
                        return item.id.split('individual-checkbox-')[1]
                    })

            const idSearchString = '?id=' + selectedIds.join('&id=')
            const searchString = selectedIds.length ? idSearchString : window.location.search
            let downloadURL = window.location.protocol + "//" + window.location.host + window.location.pathname + "/download" + searchString
            goToURL(downloadURL)
        }

        document.addEventListener("DOMContentLoaded", function () {

            const uploadButton = document.getElementById(uploadIndividualFileButtonId)
            const deleteButton = document.getElementById(deleteIndividualsButtonId)
            const downloadButton = document.getElementById(downloadIndividualsButtonId)
            const deleteButtonContent = document.getElementById(deleteIndividualsButtonContentId)
            const downloadButtonContent = document.getElementById(downloadIndividualsButtonContentId)
            const uploadFileInput = document.getElementById(uploadIndividualFileInputId)
            const selectCheckboxes = Array.from(document.getElementsByClassName(selectIndividualCheckboxClass))
            const selectAllCheckbox = document.getElementById(selectAllIndividualsCheckboxId);

            uploadButton.addEventListener('click', openUploadDialog);
            uploadFileInput.addEventListener('change', submitUploadForm);

            /**
             * Refreshes the disabled state of the delete button as well as the text of the button
             */
            function refreshDeleteButton() {
                const checkedCount = getSelectedIndividualCount()
                deleteButtonContent.innerText = getDeleteButtonText(checkedCount);
                if (checkedCount > 0) {
                    // button is active
                    for (const className of inactiveDeleteButtonClasses) {
                        deleteButton.classList.remove(className)
                    }
                    for (const className of activeDeleteButtonClasses) {
                        deleteButton.classList.add(className)
                    }
                } else {
                    // button is inactive
                    for (const className of activeDeleteButtonClasses) {
                        deleteButton.classList.remove(className)
                    }
                    for (const className of inactiveDeleteButtonClasses) {
                        deleteButton.classList.add(className)
                    }
                }
            }

            function refreshDownloadButton() {
                const checkedCount = getSelectedIndividualCount()
                downloadButtonContent.innerText = getDownloadButtonText(checkedCount);
                console.log('SDÃ–FKDS', checkedCount, getDownloadButtonText(checkedCount))
            }

            /**
             * Refreshes the style of the selected rows
             * @param {string} id of the individual
             */
            function refreshIndividualRow(id) {
                const row = document.getElementById(getRowIdForIndividualId(id));
                const checkbox = document.getElementById(getSelectCheckboxIdForIndividualId(id));
                if (checkbox.checked) {
                    // row is selected
                    for (const activeAttribute in selectedRowAttributes) {
                        row.setAttribute(activeAttribute, selectedRowAttributes[activeAttribute])
                    }
                    for (const activeClass of selectedRowClasses) {
                        row.classList.add(activeClass)
                    }
                } else {
                    // row is not selected
                    for (const activeAttribute in selectedRowAttributes) {
                        row.removeAttribute(activeAttribute)
                    }
                    for (const activeClass of selectedRowClasses) {
                        row.classList.remove(activeClass)
                    }
                }
            }

            /**
             * Refreshes the style of the select all checkbox
             */
            function refreshSelectAllCheckbox() {
                // update the select all checkbox
                const allChecked = selectCheckboxes.every(checkbox => checkbox.checked);
                const someChecked = selectCheckboxes.some(checkbox => checkbox.checked);
                selectAllCheckbox.checked = allChecked && someChecked
                selectAllCheckbox.indeterminate = someChecked && !allChecked
            }

            // Handles the change of the select all checkbox
            // Checks or unchecks all checkboxes when the select all checkbox is clicked
            selectAllCheckbox.addEventListener("change", function (event) {
                const isChecked = event.target.checked;
                for (let i = 0; i < selectCheckboxes.length; i++) {
                    selectCheckboxes[i].checked = isChecked
                    refreshIndividualRow(getIndividualIdFromSelectCheckbox(selectCheckboxes[i]))
                }
                refreshDeleteButton()
                refreshSelectAllCheckbox()
                refreshDownloadButton()
            });

            // Handles the change of a single individual select checkbox
            // Selects or unselects a single row
            for (const selectCheckbox of selectCheckboxes) {
                selectCheckbox.addEventListener("change", function (event) {
                    refreshIndividualRow(getIndividualIdFromSelectCheckbox(event.target))
                    refreshSelectAllCheckbox()
                    refreshDeleteButton()
                    refreshDownloadButton()
                })
            }

            const tableContainer = document.getElementById(individualTableContainerId)

            // restore the horizontal scroll position
            const horizontalScrollStr = sessionStorage.getItem(individualTableHorizontalScrollKey)
            if (horizontalScrollStr) {
                tableContainer.scrollLeft = parseInt(horizontalScrollStr)
            }
            setTimeout(() => {
                tableContainer.classList.remove("opacity-0")
            }, 0)

            // store the horizontal scroll position of the table
            tableContainer.addEventListener("scroll", function (event) {
                const scrollLeft = event.target.scrollLeft;
                sessionStorage.setItem(individualTableHorizontalScrollKey, scrollLeft);
            });

            // Refresh the text and style of the delete button when the page is loaded
            refreshDeleteButton()

        });
    </script>

{{end}}
{{define "body"}}
    <header class="sticky-top">
        {{template "nav" .}}
    </header>
    <main style="">
        <div class="container-fluid p-5">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="my-4">{{ $.RequestContext.SelectedCountry.Name }}</h1>

                <div class="d-flex justify-content-end align-items-center">
                    {{ if or (.RequestContext.Auth.IsGlobalAdmin) (.RequestContext.Auth.HasCountryLevelPermission .RequestContext.SelectedCountryID 1)}}
                        <button type="button"
                                id="deleteIndividualsButton"
                                style="width: 21rem"
                                class="btn disabled btn-outline-secondary me-2 individual-action-button"
                                data-bs-toggle="modal"
                                data-bs-target="#deleteIndividualsConfirmationModal"
                                onclick="refreshDeleteConfirmationModal()">
                            <i class="bi bi-trash"></i>
                            <span id="deleteIndividualsButtonContent">Delete individuals</span>
                        </button>
                        <a href="/countries/{{.Options.CountryID}}/individuals/new"
                           class="btn btn-outline-primary me-2">
                            Create new Individual
                        </a>
                    {{end}}
                    <button onclick="downloadFunc()" class="btn btn-outline-primary" id="downloadIndividualsButton">
                        <span id="downloadIndividualsButtonContent">Download individuals</span>
                    </button>
                    {{ if or (.RequestContext.Auth.IsGlobalAdmin) (.RequestContext.Auth.HasCountryLevelPermission .RequestContext.SelectedCountryID 1)}}
                        <form id="individual-upload--form" action="/countries/{{.Options.CountryID}}/individuals/upload"
                              enctype="multipart/form-data" method="post" class="ms-2">
                            <input
                                    hidden
                                    id="individual-upload--file"
                                    name="file"
                                    type="file"
                                    class="form-control"
                                    accept="text/csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            >
                            <button id="individual-upload--button" type="button" class="btn btn-outline-primary">
                                Upload
                            </button>
                        </form>
                    {{end}}
                </div>
            </div>

            {{$checkBoxWidth := "4rem"}}
            {{$dateWidth := "8rem"}}
            {{$dateTimeWidth := "10rem"}}
            {{$identWidth := "8rem"}}

            {{$selectWidth := "2rem"}}
            {{$idWidth := "20rem"}}
            {{$nameWidth := "10rem"}}
            {{$sexWidth := "8rem"}}
            {{$ageWidth := "4rem"}}
            {{$birthDateWidth := $dateWidth}}
            {{$householdIDWidth := $identWidth}}
            {{$isHeadOfHouseholdWidth := $checkBoxWidth}}
            {{$communityIDWidth := $identWidth}}
            {{$isHeadOfCommunityWidth := $checkBoxWidth}}
            {{$phoneNumberWidth := "14rem"}}
            {{$emailWidth := "14rem"}}
            {{$registrationDateWidth := $dateWidth}}
            {{$collectionAdministrativeAreaWidth := "10rem"}}
            {{$collectionAdministrativeArea1Width := $collectionAdministrativeAreaWidth}}
            {{$collectionAdministrativeArea2Width := $collectionAdministrativeAreaWidth}}
            {{$collectionAdministrativeArea3Width := $collectionAdministrativeAreaWidth}}
            {{$freeFieldWidth := "8rem"}}
            {{$freeField1Width := $freeFieldWidth}}
            {{$freeField2Width := $freeFieldWidth}}
            {{$freeField3Width := $freeFieldWidth}}
            {{$freeField4Width := $freeFieldWidth}}
            {{$freeField5Width := $freeFieldWidth}}
            {{$createdAtWidth := $dateTimeWidth}}
            {{$updatedAtWidth := $dateTimeWidth}}

            <!-- INDIVIDUALS TABLE -->
            <form id="individuals-action-form" class="table-responsive mb-3 opacity-0" method="post">
                <table class="table table-individuals">
                    <thead>
                    <tr>
                        <th class="sticky-column text-center" style="width: {{$selectWidth}}">
                            <input class="form-check-input" type="checkbox" id="selectAllCheckbox"/>
                        </th>

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "id"
                        "Label" "ID"
                        "Scope" "col"
                        "Class" "sticky-column "
                        "Title" "ID"
                        "Style" "left: 3rem"
                        "Width" $idWidth
                        "MinWidth" $idWidth
                        "MaxWidth" $idWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "full_name"
                        "Label" "Name"
                        "Scope" "col"
                        "Class" "sticky-column border-end"
                        "Style" "left: 24rem"
                        "Title" "Full Name"
                        "Width" $nameWidth
                        "MinWidth" $nameWidth
                        "MaxWidth" $nameWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "sex"
                        "Label" "Sex"
                        "Title" "Sex"
                        "Width" $sexWidth
                        "MinWidth" $sexWidth
                        "MaxWidth" $sexWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "age"
                        "Label" "Age"
                        "Title" "Age"
                        "Width" $ageWidth
                        "MinWidth" $ageWidth
                        "MaxWidth" $ageWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "birth_date"
                        "Label" "Birth Date"
                        "Title" "Birth Date"
                        "Width" $birthDateWidth
                        "MinWidth" $birthDateWidth
                        "MaxWidth" $birthDateWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "household_id"
                        "Label" "Household ID"
                        "Title" "Household ID"
                        "Width" $householdIDWidth
                        "MinWidth" $householdIDWidth
                        "MaxWidth" $householdIDWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "is_head_of_household"
                        "Label" "HoH"
                        "Title" "Head of Household"
                        "Class" "text-center"
                        "Width" $isHeadOfHouseholdWidth
                        "MinWidth" $isHeadOfHouseholdWidth
                        "MaxWidth" $isHeadOfHouseholdWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "community_id"
                        "Label" "Community ID"
                        "Title" "Community ID"
                        "Width" $communityIDWidth
                        "MinWidth" $communityIDWidth
                        "MaxWidth" $communityIDWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "is_head_of_community"
                        "Label" "CR"
                        "Title" "Community Representative"
                        "Class" "text-center"
                        "Width" $isHeadOfCommunityWidth
                        "MinWidth" $isHeadOfCommunityWidth
                        "MaxWidth" $isHeadOfCommunityWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "phone_number_1"
                        "Label" "Phone Number"
                        "Title" "Phone Number"
                        "Width" $phoneNumberWidth
                        "MinWidth" $phoneNumberWidth
                        "MaxWidth" $phoneNumberWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "email_1"
                        "Label" "Email"
                        "Title" "Email Address"
                        "Width" $emailWidth
                        "MinWidth" $emailWidth
                        "MaxWidth" $emailWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "collection_time"
                        "Label" "Registration"
                        "Title" "Registration Date"
                        "Width" $registrationDateWidth
                        "MinWidth" $registrationDateWidth
                        "MaxWidth" $registrationDateWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "collection_administrative_area_1"
                        "Label" "Area1"
                        "Title" "Collection Administrative Area 1"
                        "Width" $collectionAdministrativeArea1Width
                        "MinWidth" $collectionAdministrativeArea1Width
                        "MaxWidth" $collectionAdministrativeArea1Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "collection_administrative_area_2"
                        "Label" "Area2"
                        "Title" "Collection Administrative Area 2"
                        "Width" $collectionAdministrativeArea2Width
                        "MinWidth" $collectionAdministrativeArea2Width
                        "MaxWidth" $collectionAdministrativeArea2Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "collection_administrative_area_3"
                        "Label" "Area3"
                        "Title" "Collection Administrative Area 3"
                        "Width" $collectionAdministrativeArea3Width
                        "MinWidth" $collectionAdministrativeArea3Width
                        "MaxWidth" $collectionAdministrativeArea3Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "free_field_1"
                        "Label" "Free Field 1"
                        "Title" "Free Field 1"
                        "Width" $freeField1Width
                        "MinWidth" $freeField1Width
                        "MaxWidth" $freeField1Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "free_field_2"
                        "Label" "Free Field 2"
                        "Title" "Free Field 2"
                        "Width" $freeField2Width
                        "MinWidth" $freeField2Width
                        "MaxWidth" $freeField2Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "free_field_3"
                        "Label" "Free Field 3"
                        "Title" "Free Field 3"
                        "Width" $freeField3Width
                        "MinWidth" $freeField3Width
                        "MaxWidth" $freeField3Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "free_field_4"
                        "Label" "Free Field 4"
                        "Title" "Free Field 4"
                        "Width" $freeField4Width
                        "MinWidth" $freeField4Width
                        "MaxWidth" $freeField4Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "free_field_5"
                        "Label" "Free Field 5"
                        "Title" "Free Field 5"
                        "Width" $freeField5Width
                        "MinWidth" $freeField5Width
                        "MaxWidth" $freeField5Width
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "created_at"
                        "Label" "Created"
                        "Title" "Date Created"
                        "Width" $createdAtWidth
                        "MinWidth" $createdAtWidth
                        "MaxWidth" $createdAtWidth
                        )}}

                        {{template "columnHeader" (dict
                        "Options" .Options
                        "Sortable" true
                        "SortKey" "updated_at"
                        "Label" "Updated"
                        "Title" "Date Updated"
                        "Width" $updatedAtWidth
                        "MinWidth" $updatedAtWidth
                        "MaxWidth" $updatedAtWidth
                        )}}

                        <th><!--filler--></th>
                    </tr>
                    </thead>
                    <tbody>
                    {{ if .Individuals }}
                        {{range .Individuals}}
                            <tr aria-selected="false"
                                id="individual-row-{{.ID}}"
                                class="individual-row"
                                data-individual-id="{{.ID}}">

                                <td class="sticky-column text-center">
                                    <div style="width: {{$selectWidth}}">
                                        <input class="form-check-input select-row-checkbox"
                                               type="checkbox"
                                               id="individual-checkbox-{{.ID}}"
                                               value="{{.ID}}"
                                               name="individual_id"/>
                                    </div>
                                </td>

                                <!-- ID -->
                                <td class="sticky-column" style="left: 3rem">
                                    <div style="width: {{$idWidth}}">
                                        <a href="/countries/{{.CountryID}}/individuals/{{.ID}}">
                                            {{.ID}}
                                        </a>
                                    </div>
                                </td>
                                <!-- End ID -->

                                <!-- Name -->
                                <td class="sticky-column border-end" style="left: 24rem">
                                    <div style="width: {{$nameWidth}}">
                                        {{if .FullName}}
                                            {{.FullName}}
                                        {{else}}
                                            <span class="text-muted"><em>anonymous</em></span>
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End Name -->

                                <!-- Sex -->
                                <td>
                                    <div style="width: {{$sexWidth}}">
                                        {{.Sex}}
                                    </div>
                                </td>
                                <!-- End Sex -->

                                <!-- Age -->
                                <td>
                                    <div style="width: {{$ageWidth}}">
                                        {{if .Age}}
                                            {{.Age}}
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End Age -->

                                <!-- BirthDate -->
                                <td>
                                    <div style="width: {{$birthDateWidth}}">
                                        {{if .BirthDate}}
                                            <span title="{{.BirthDate.Format "2006-01-02"}}">{{.BirthDate.Format "2006-01-02"}}</span>
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End BirthDate -->

                                <!-- HouseholdID -->
                                <td>
                                    <div style="width: {{$householdIDWidth}}">
                                        {{.HouseholdID}}
                                    </div>
                                </td>
                                <!-- End HouseholdID -->

                                <!-- IsHeadOfHousehold -->
                                <td>
                                    <div class="text-center" style="width: {{$isHeadOfHouseholdWidth}}">
                                        {{if .IsHeadOfHousehold}}
                                            <input class="form-check-input marker-only"
                                                   type="checkbox"
                                                   checked="checked"
                                                   disabled="disabled"/>
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End IsHeadOfHousehold -->

                                <!-- CommunityID -->
                                <td>
                                    <div style="width: {{$communityIDWidth}}">
                                        {{.CommunityID}}
                                    </div>
                                </td>
                                <!-- End CommunityID -->

                                <!-- IsHeadOfCommunity -->
                                <td>
                                    <div class="text-center" style="width: {{$isHeadOfCommunityWidth}}">
                                        {{if .IsHeadOfCommunity}}
                                            <input class="form-check-input marker-only"
                                                   type="checkbox"
                                                   checked="checked"
                                                   disabled="disabled">
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End IsHeadOfCommunity -->

                                <!-- PhoneNumber -->
                                <td>
                                    <div style="width: {{$phoneNumberWidth}}">
                                        {{if .PhoneNumber1}}
                                            <a class="font-monospace"
                                               href="tel:{{.PhoneNumber1}}">{{.PhoneNumber1}}</a>
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End PhoneNumber -->

                                <!-- Email -->
                                <td>
                                    <div style="width: {{$emailWidth}}">
                                        {{if .Email1}}
                                            <a href="mailto:{{.Email1}}">{{.Email1}}</a>
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End Email -->

                                <!-- Registration Date -->
                                <td>
                                    <div style="width: {{$registrationDateWidth}}">
                                        {{if .CollectionTime}}
                                            {{.CollectionTime.Format "2006-01-02"}}
                                        {{end}}
                                    </div>
                                </td>
                                <!-- End Registration Date -->

                                <!-- CollectionAdministrativeArea1 -->
                                <td>
                                    <div style="width: {{$collectionAdministrativeArea1Width}}">
                                        {{.CollectionAdministrativeArea1}}
                                    </div>
                                </td>
                                <!-- End CollectionAdministrativeArea1 -->

                                <!-- CollectionAdministrativeArea2 -->
                                <td>
                                    <div style="width: {{$collectionAdministrativeArea2Width}}">
                                        {{.CollectionAdministrativeArea2}}
                                    </div>
                                </td>
                                <!-- End CollectionAdministrativeArea2 -->

                                <!-- CollectionAdministrativeArea3 -->
                                <td>
                                    <div style="width: {{$collectionAdministrativeArea3Width}}">
                                        {{.CollectionAdministrativeArea3}}
                                    </div>
                                </td>
                                <!-- End CollectionAdministrativeArea3 -->

                                <!-- FreeField1 -->
                                <td>
                                    <div style="width: {{$freeField1Width}}">
                                        {{.FreeField1}}
                                    </div>
                                </td>
                                <!-- End FreeField1 -->

                                <!-- FreeField2 -->
                                <td>
                                    <div style="width: {{$freeField2Width}}">
                                        {{.FreeField2}}
                                    </div>
                                </td>
                                <!-- End FreeField2 -->

                                <!-- FreeField3 -->
                                <td>
                                    <div style="width: {{$freeField3Width}}">
                                        {{.FreeField3}}
                                    </div>
                                </td>
                                <!-- End FreeField3 -->

                                <!-- FreeField4 -->
                                <td>
                                    <div style="width: {{$freeField4Width}}">
                                        {{.FreeField4}}
                                    </div>
                                </td>
                                <!-- End FreeField4 -->

                                <!-- FreeField5 -->
                                <td>
                                    <div style="width: {{$freeField5Width}}">
                                        {{.FreeField5}}
                                    </div>
                                </td>
                                <!-- End FreeField5 -->

                                <!-- CreatedAt -->
                                <td>
                                    <div style="width: {{$createdAtWidth}}">
                                        {{.CreatedAt.Format "2006-01-02 15:04:05"}}
                                    </div>
                                </td>
                                <!-- End CreatedAt -->

                                <!-- UpdatedAt -->
                                <td>
                                    <div style="width: {{$updatedAtWidth}}">
                                        {{.UpdatedAt.Format "2006-01-02 15:04:05"}}
                                    </div>
                                </td>
                                <!-- End UpdatedAt -->

                            </tr>
                        {{end}}
                    {{else}}
                        <tr>
                            <td colspan="23">No individuals found</td>
                        </tr>
                    {{end}}
                    </tbody>
                </table>
            </form>
            <!-- END INDIVIDUALS TABLE -->

            <!-- PAGE FOOTER -->
            <div class="d-flex align-items-start justify-content-end mb-5">
                <div class="d-flex align-items-center">
                    Results:
                    <nav aria-label="pick amount of results" class="ms-2">
                        <ul class="pagination mb-0">
                            <li class="page-item {{if eq .Options.Take 20}}active{{end}}">
                                <a href="{{(.Options.WithTake 20).QueryParams}}" class="page-link">20</a>
                            </li>
                            <li class="page-item {{if eq .Options.Take 50}}active{{end}}">
                                <a href="{{(.Options.WithTake 50).QueryParams}}" class="page-link">50</a>
                            </li>
                            <li class="page-item {{if eq .Options.Take 100}}active{{end}}">
                                <a href="{{(.Options.WithTake 100).QueryParams}}" class="page-link">100</a>
                            </li>
                        </ul>
                    </nav>
                </div>
                <div class="ms-3">
                    <nav aria-label="Page navigation">
                        <ul class="pagination">
                            <li class="page-item {{if eq 0 .Options.Skip}}disabled{{end}}">
                                <a class="page-link" href="{{.Options.FirstPage.QueryParams}}">First</a>
                            </li>
                            <li class="page-item {{if eq 0 .Options.Skip}}disabled{{end}}">
                                <a class="page-link"
                                   href="{{.Options.PreviousPage.QueryParams}}">Previous</a>
                            </li>
                            <li class="page-item {{if lt (len .Individuals) .Options.Take}}disabled{{end}}">
                                <a class="page-link"
                                   href="{{.Options.NextPage.QueryParams}}">Next</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
            <!-- END PAGE FOOTER -->
        </div>
    </main>

    <div class="modal modal-lg" tabindex="-1" id="deleteIndividualsConfirmationModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-exclamation-circle text-danger"></i>
                        Delete Individuals
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <span id="deleteIndividualsConfirmationModalContent">
                        <!-- Content is filled in by JavaScript -->
                    </span> <span class="text-danger fw-bold">This action cannot be undone.</span>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button"
                            class="btn btn-danger"
                            id="deleteIndividualsConfirmationModalConfirmButton"
                            onclick="submitActionForm('delete')">
                        <i class="bi bi-trash"></i>&nbsp;
                        <span id="deleteIndividualsConfirmationModalConfirmButtonContent"></span>
                        <!-- Content is filled in by JavaScript -->
                    </button>
                </div>
            </div>
        </div>
    </div>


{{end}}

{{define "columnHeader"}}
    {{$options := .Options}}
    {{$sortable := .Sortable}}
    {{$label := .Label}}
    {{$width := .Width}}
    {{$minWidth := .MinWidth}}
    {{$maxWidth := .MaxWidth}}
    {{$sortKey := .SortKey}}
    {{$sortOnClick := ""}}
    {{$sortDirection := ""}}
    {{$sortDirectionForLink := ""}}
    {{$sorted := false}}
    {{if $sortable}}
        {{$sortDirection = $options.GetSortDirection $sortKey}}
        {{if eq $sortDirection "ascending"}}
            {{$sorted = true}}
            {{$sortDirectionForLink = "descending"}}
        {{ else if eq $sortDirection "descending"}}
            {{$sorted = true}}
            {{$sortDirectionForLink = "ascending"}}
        {{else}}
            {{$sortDirectionForLink = "ascending"}}
        {{end}}
        {{$sortLinkUrl := ($options.WithSort $sortKey $sortDirectionForLink).QueryParams }}
        {{$sortOnClick = concat "onclick=\"goToURL('" $sortLinkUrl "')\"" }}
    {{end}}

    {{$style := "style=\""}}
    {{if .Style}}{{$style = concat $style .Style}}{{end}}
    {{$style = concat $style ";" }}
    {{if $width}}
        {{$style = concat $style "width: " $width ";" }}
    {{end}}
    {{if $minWidth}}
        {{$style = concat $style "min-width: " $minWidth ";" }}
    {{end}}
    {{if $maxWidth}}
        {{$style = concat $style "max-width: " $maxWidth ";" }}
    {{end}}
    {{$style = concat $style "\"" }}

    <th {{$style | attr}}
            class="{{.Class}} {{if $sortable}}sortable{{end}} {{if $sorted}}sorted{{end}}"
            {{if .Scope}}scope="{{.Scope}}"{{end}}
            {{if .Title}}title="{{.Title}}"{{end}}
            {{if $sortable}}{{$sortOnClick | attr}}{{end}}
            {{if $sortable}}
                {{if eq $sortDirection ""}}
                    aria-sort="none"
                {{ else if eq $sortDirection "ascending"}}
                    aria-sort="ascending"
                {{ else if eq $sortDirection "descending"}}
                    aria-sort="descending"
                {{end}}
            {{end}}
    >
        <div class="d-flex flex-row">
            <span class="flex-grow-1">{{$label}}</span>

            <div class="text-center" style="min-width: 2rem;">
                {{if $sortable}}
                    <!-- print current sorting direction icon -->
                    <span class="ms-1 me-1 sort-icon-current">
                        {{- if eq $sortDirection "ascending" -}}
                            <i class="bi bi-sort-up"></i>
                        {{- else if eq $sortDirection "descending" -}}
                            <i class="bi bi-sort-down"></i>
                        {{- end -}}
                    </span>

                    <!-- print next sorting direction icon -->
                    <span class="ms-1 me-1 sort-icon-next text-primary">
                        {{- if eq $sortDirectionForLink "ascending" -}}
                            <i class="bi bi-sort-up"></i>
                        {{- else if eq $sortDirectionForLink "descending" -}}
                            <i class="bi bi-sort-down"></i>
                        {{- end -}}
                    </span>

                    <!-- print sortable icon -->
                    <span class="ms-1 me-1 sort-icon-sortable"><i class="bi bi-list"></i></span>
                {{end}}
            </div>
        </div>
    </th>


{{end}}