# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  BUILD_CONTEXT: '$(Build.Repository.LocalPath)'
  CONTAINER_REGISTRY: 'c4845e33-342b-4634-8f08-e9785abe07be'
  DOCKERFILE_PATH: 'build/package/app.Dockerfile'
  DOCKER_BUILDKIT: 1
  GOBIN:  '$(GOPATH)\bin'
  GOPATH: '$(System.DefaultWorkingDirectory)\gopath'
  GO_VERSION: '1.19.2'
  IS_MAIN: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  LDFLAGS: '-w -s'
  REPOSITORY: 'core'
  TAG: '$(Build.BuildId)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Test
    displayName: Test
    steps:

    - task: GoTool@0
      inputs:
        version: $(GO_VERSION)
        goBin: $(GOBIN)
        goPath: $(GOPATH)
    
    - bash: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        shopt -s extglob
        shopt -s dotglob
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'
      
    - bash: |
        go version
        go install github.com/jstemmer/go-junit-report/v2@latest
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
      displayName: 'Get dependencies'

    - bash: |
        go vet ./...
      continueOnError: 'true'
      displayName: 'vet and lint'

    - bash: |
        mkdir coverage
        go test ./... -v -coverpkg=./... -coverprofile=./coverage/coverage.txt -covermode count 2>&1 | go-junit-report > ./coverage/junit.xml
        rc=${PIPESTATUS[0]}
        gocov convert ./coverage/coverage.txt > ./coverage/coverage.json
        gocov-xml < ./coverage/coverage.json > ./coverage/coverage.xml
        if [ $rc -ne 0 ]; then
          echo "Tests failed"
          exit 1
        else
          echo "Tests succeeded"
          exit 0
        fi
      displayName: 'Run unit tests'
    - task: Go@0
      env:
        GO111MODULE: on
        CGO_ENABLED: '0'
        GOOS: linux
        GOARCH: amd64
      inputs:
        command: 'build'
        arguments: -o core -ldflags "$(LDFLAGS)" --tags fts5
        workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Build Go app'

    - publish: '$(Build.SourcesDirectory)/core'
      artifact: 'Executable'
      displayName: 'Publish pipeline artifact'

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*report*.xml' 
        searchFolder: '$(Build.SourcesDirectory)'
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
      displayName: 'Publish code coverage results'

  - job: BuildImage
    dependsOn: [Test]
    condition: and(succeeded(), eq(variables.IS_MAIN, 'true'))
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(REPOSITORY)
        dockerfile: $(DOCKERFILE_PATH)
        buildContext: $(BUILD_CONTEXT)
        containerRegistry: $(CONTAINER_REGISTRY)
        tags: |
          $(TAG)
