# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  BUILD_CONTEXT: '$(Build.Repository.LocalPath)'
  DOCKERFILE_PATH: 'build/package/app.Dockerfile'
  DOCKER_BUILDKIT: 1
  GOBIN:  '$(GOPATH)\bin'
  GOPATH: '$(System.DefaultWorkingDirectory)\gopath'
  GO_VERSION: '1.19.2'
  IS_MAIN: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  LDFLAGS: '-w -s'
  REPOSITORY: 'core/webapp'
  TAG: '$(Build.BuildId)'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: TestBuildPush
  displayName: Test, Build & Push
  jobs:
  - job: Test
    displayName: Test, Lint & Coverage
    steps:

    - task: GoTool@0
      displayName: Install GO
      inputs:
        version: $(GO_VERSION)
        goBin: $(GOBIN)
        goPath: $(GOPATH)

    - bash: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        shopt -s extglob
        shopt -s dotglob
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'

    - bash: |
        go version
        go install github.com/jstemmer/go-junit-report/v2@latest
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest
      displayName: 'Get dependencies'

    - bash: |
        go vet ./...
      continueOnError: 'true'
      displayName: 'Run go vet'

    - bash: |
        mkdir reports
        go test ./... -v -coverpkg=./... -coverprofile=./reports/coverage.txt -covermode count 2>&1 | go-junit-report > ./reports/junit.xml
        gocov convert ./reports/coverage.txt > ./reports/coverage.json
        gocov-xml < ./reports/coverage.json > ./reports/coverage.xml
      displayName: 'Run unit tests'

    - task: PublishTestResults@2
      displayName: 'Publish test results'
      condition: always()
      inputs:
        failTaskOnFailedTests: true
        testResultsFormat: 'JUnit'
        testResultsFiles: './reports/junit.xml'
        searchFolder: '$(Build.SourcesDirectory)'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage results'
      condition: always()
      inputs:
        failIfCoverageEmpty: true
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: './reports/coverage.xml'

  - job: BuildPush
    dependsOn: [Test]
    condition: and(succeeded(), eq(variables.IS_MAIN, 'true'))
    displayName: Build and Push Docker Image
    steps:
    - task: Docker@2
      name: docker
      displayName: Build and push to container registry
      inputs:
        command: buildAndPush
        repository: $(REPOSITORY)
        dockerfile: $(DOCKERFILE_PATH)
        buildContext: $(BUILD_CONTEXT)
        containerRegistry: $(CONTAINER_REGISTRY_CONNECTION)
        tags: |
          $(TAG)

    - bash: echo -n "$(CONTAINER_REGISTRY)/$(REPOSITORY):$(TAG)" > $(Build.SourcesDirectory)/imageref.txt
      displayName: Output version build artifact

    - publish: $(Build.SourcesDirectory)/ref.txt
      artifact: ImageRef
      displayName: Publish image reference output build artifact

    - bash: echo -n "$(CONTAINER_REGISTRY)/$(REPOSITORY)" > $(Build.SourcesDirectory)/image.txt
      displayName: Output image build artifact

    - publish: $(Build.SourcesDirectory)/image.txt
      artifact: Image
      displayName: Publish image output build artifact

    - bash: echo -n "$(TAG)" > $(Build.SourcesDirectory)/tag.txt
      displayName: Output version build artifact

    - publish: $(Build.SourcesDirectory)/tag.txt
      artifact: Version
      displayName: Publish version build artifact

    - publish: $(Build.SourcesDirectory)/deploy/terraform
      artifact: Terraform
      displayName: Publish terraform manifests build artifact