# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'c4845e33-342b-4634-8f08-e9785abe07be'
  imageRepository: 'core'
  containerRegistry: '47426b20707cdf3d.azurecr.io'
  dockerfilePath: 'build/package/app.Dockerfile'
  buildContext: '$(Build.Repository.LocalPath)'
  tag: '$(Build.BuildId)'
  goVersion: '1.19.2'
  DOCKER_BUILDKIT: 1
  GOBIN:  '$(GOPATH)\bin'
  GOPATH: '$(System.DefaultWorkingDirectory)\gopath'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Test
    displayName: Test
    steps:
    - task: GoTool@0
      inputs:
        version: $(goVersion)
        goBin: $(GOBIN)
        goPath: $(GOPATH)
    
    - script: echo '##vso[task.prependpath]$(GOBIN)'

    - script: |

        echo Installing tools
        go install github.com/jstemmer/go-junit-report/v2@latest
        go install github.com/axw/gocov/gocov@latest
        go install github.com/AlekSi/gocov-xml@latest

        echo Installing dependencies
        go mod download

        echo Starting tests
        go test ./... -v -coverprofile=coverage.txt -covermode count 2>&1 | go-junit-report > report.xml

        echo "Getting result code of go test"
        rc=${PIPESTATUS[0]} 

        echo Converting coverage.txt to json
        gocov convert coverage.txt > coverage.json

        echo Converting coverage.json to xml
        gocov-xml < coverage.json > coverage.xml
        
        echo Check if `go test` had an error
        if [ $rc -ne 0 ]; then
          # Let script fail by writing to stderr
          >&2 echo "Tests failed"
        else
          echo "Tests succeeded"
        fi
      displayName: 'Run unit tests and convert results'
      failOnStderr: true
    - task: Go@0
      inputs:
        command: 'build'
        arguments: '-a -o core'
      displayName: 'Build Go app'

    - publish: '$(Build.SourcesDirectory)/core'
      artifact: 'Executable'
      displayName: 'Publish pipeline artifact'

    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*report*.xml' 
        searchFolder: '$(Build.SourcesDirectory)'
      displayName: 'Publish test results'

    - task: PublishCodeCoverageResults@1
      condition: always()
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverage.xml'
      displayName: 'Publish code coverage results'

  - job: BuildImage
    dependsOn: [Test]
    displayName: Build Docker Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        buildContext: $(buildContext)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
